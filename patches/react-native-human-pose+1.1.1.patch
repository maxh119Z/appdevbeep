diff --git a/node_modules/react-native-human-pose/index.tsx b/node_modules/react-native-human-pose/index.tsx
index 56c80cf..170615e 100644
--- a/node_modules/react-native-human-pose/index.tsx
+++ b/node_modules/react-native-human-pose/index.tsx
@@ -1,7 +1,8 @@
-import React, { useState, useEffect } from 'react';
-import {WebView} from 'react-native-webview';
-import {Dimensions, Platform} from 'react-native';
+import React from 'react';
+import { WebView } from 'react-native-webview';
+import { Dimensions } from 'react-native';
 
+// Props interface for the HumanPose component
 interface HumanPoseProps {
   width?: number;
   height?: number;
@@ -18,53 +19,79 @@ interface HumanPoseProps {
 }
 
 export default function HumanPose(p: HumanPoseProps) {
+  /**
+   * Callback function that is invoked when a pose is detected by the WebView.
+   * @param pose - The pose data received from the WebView.
+   */
   const onPoseDetected = (pose: any) => {
     if (p.onPoseDetected) {
       p.onPoseDetected(pose);
     }
   };
 
-  let screenHeight = p.isFullScreen ? Dimensions.get('window').height * 2 : p.height ? p.height * 2.6 : 200 * 2.6;
-  let screenWidth = p.isFullScreen ? Dimensions.get('window').width * 2 : p.width ? p.width * 2.6 : 200 * 2.6;
+  // URLs for the different pose detection models hosted on the web.
+  const blazePoseUrl = 'https://trainmate-blaze-pose.web.app/';
+  const poseNetUrl = 'https://react-native-human-pose.web.app/';
 
-  const blazePose = 'https://trainmate-blaze-pose.web.app/';
-  const poseNet = 'https://react-native-human-pose.web.app/';
+  // Determine the correct URL based on the selected model prop.
+  const modelUrl = p.model === 'blazePose' ? blazePoseUrl : poseNetUrl;
+
+  // Construct the query parameters to pass to the web app.
+  const queryParams = new URLSearchParams({
+    enableSkeleton: String(p.enableSkeleton ?? false),
+    enableKeyPoints: String(p.enableKeyPoints ?? false),
+    color: p.color || '',
+    mode: p.mode || '',
+    scoreThreshold: String(p.scoreThreshold || ''),
+    isBackCamera: String(p.isBackCamera ?? false),
+    flipHorizontal: String(p.flipHorizontal ?? false),
+    isFullScreen: String(p.isFullScreen ?? false),
+  }).toString();
+
+  const finalUri = `${modelUrl}?${queryParams}`;
 
   return (
     <WebView
-      source={{
-        uri: `${p.model === 'blazePose' ? blazePose : poseNet}/?enableSkeleton=${
-          p.enableSkeleton === true ? p.enableSkeleton : 'false'
-        }&enableKeyPoints=${p.enableKeyPoints === true ? p.enableKeyPoints : 'false'}&color=${
-          p.color ? p.color : ''
-        }&mode=${p.mode ? p.mode : ''}&scoreThreshold=${
-          p.scoreThreshold ? p.scoreThreshold : ''
-        }&isBackCamera=${p.isBackCamera ? p.isBackCamera : ''}&flipHorizontal=${
-          p.flipHorizontal ? p.flipHorizontal : ''
-        }&isFullScreen=${p.isFullScreen ? p.isFullScreen : ''}`,
-      }}
+      source={{ uri: finalUri }}
       style={{
-        width: p.isFullScreen ? p.width : p.width ? p.width : 200,
-        height: p.isFullScreen ? p.height : p.height ? p.height : 200,
-        // Dimensions.get('window').height / 2.8,
+        width: p.width ?? 200,
+        height: p.height ?? 200,
         borderRadius: 5,
-        // borderWidth: 2,
-        // borderColor: 'red',
       }}
-      geolocationEnabled={true}
-      mediaPlaybackRequiresUserAction={false}
+      // Allow media (camera stream) to play without a user gesture (e.g., a tap).
+      // This is crucial for the camera to start automatically.
+      // `mediaPlaybackRequiresUserAction` was deprecated and replaced by this.
+      mediaPlaybackRequiresUserGesture={false}
+      
+      // Allows the camera video to play directly within the WebView on iOS.
+      allowsInlineMediaPlayback={true}
+      
+      // Standard props to enable necessary web features.
       javaScriptEnabled={true}
       domStorageEnabled={true}
-      allowsInlineMediaPlayback={true}
-      limitsNavigationsToAppBoundDomains={true}
+      
+      // This prop was removed in newer versions of react-native-webview.
+      // Navigation can be controlled with `onShouldStartLoadWithRequest` if needed,
+      // but for this component's simple use case, it can be safely removed.
+      // limitsNavigationsToAppBoundDomains={true}
+
+      /**
+       * A message is sent from the WebView when a pose is detected.
+       * This handler parses the message and calls the onPoseDetected callback.
+       */
       onMessage={event => {
         try {
           const pose = JSON.parse(event.nativeEvent.data);
           onPoseDetected(pose);
         } catch (e) {
-          console.log(e);
+          console.error('Failed to parse pose data:', e);
         }
       }}
+      // Added an error handler for better debugging.
+      onError={(syntheticEvent) => {
+        const { nativeEvent } = syntheticEvent;
+        console.warn('WebView error: ', nativeEvent);
+      }}
     />
   );
 }
